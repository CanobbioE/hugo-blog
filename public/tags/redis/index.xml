<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on The art of BEEP-BOOPing</title>
    <link>https://www.canobbioe.com/tags/redis/</link>
    <description>Recent content in redis on The art of BEEP-BOOPing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Aug 2021 21:08:21 +0200</lastBuildDate><atom:link href="https://www.canobbioe.com/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Distributed Locking with AWS Redis</title>
      <link>https://www.canobbioe.com/posts/redis-as-distributed-lock/redis-as-distributed-lock/</link>
      <pubDate>Mon, 09 Aug 2021 21:08:21 +0200</pubDate>
      
      <guid>https://www.canobbioe.com/posts/redis-as-distributed-lock/redis-as-distributed-lock/</guid>
      <description>Intro&amp;nbsp;¶ In this post we&amp;rsquo;re going to explore one of the many ways we can use Redis and Go to build something cool. Specifically, we&amp;rsquo;ll be building a distributed lock to prevent race condition between micro-services.
Redis&amp;nbsp;¶ Let&amp;rsquo;s start by looking at Redis. If you google it, the first result states that:
Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker.</description>
    </item>
    
  </channel>
</rss>
